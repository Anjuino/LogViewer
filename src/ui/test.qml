import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Window

Window {
    id: root
    visible: true
    width: 800
    height: 600
    title: "Test Page - PySide6 + QML"
    color: "#f0f0f0"

    // –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    Rectangle {
        anchors.fill: parent
        anchors.margins: 20
        color: "transparent"

        ColumnLayout {
            anchors.fill: parent
            spacing: 15

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Label {
                text: "üõ†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                font.pixelSize: 24
                font.bold: true
                Layout.alignment: Qt.AlignHCenter
                color: "#333"
            }

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            Rectangle {
                Layout.fillWidth: true
                height: 2
                color: "#ddd"
            }

            // –°–µ–∫—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            GroupBox {
                title: "üìã –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫"
                Layout.fillWidth: true

                ColumnLayout {
                    width: parent.width

                    ComboBox {
                        id: comboBox
                        Layout.fillWidth: true
                        model: Backend.get_combo_data()
                        onCurrentTextChanged: {
                            if (currentText) {
                                Backend.log("–í—ã–±—Ä–∞–Ω: " + currentText)
                            }
                        }
                    }

                    RowLayout {
                        TextField {
                            id: newItemInput
                            Layout.fillWidth: true
                            placeholderText: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç..."
                            onAccepted: addButton.clicked()
                        }

                        Button {
                            id: addButton
                            text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
                            onClicked: {
                                if (newItemInput.text) {
                                    Backend.add_item(newItemInput.text)
                                    newItemInput.clear()
                                }
                            }
                        }
                    }
                }
            }

            // –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
            GroupBox {
                title: "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏"
                Layout.fillWidth: true

                GridLayout {
                    columns: 2
                    rowSpacing: 10
                    columnSpacing: 10

                    Button {
                        text: "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                        Layout.fillWidth: true
                        onClicked: Backend.generate_random_data()
                    }

                    Button {
                        text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
                        Layout.fillWidth: true
                        onClicked: Backend.clear_data()
                    }

                    Button {
                        text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
                        Layout.fillWidth: true
                        onClicked: comboBox.model = Backend.get_combo_data()
                    }

                    Button {
                        text: "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π"
                        Layout.fillWidth: true
                        onClicked: {
                            if (comboBox.currentIndex >= 0) {
                                Backend.remove_item(comboBox.currentIndex)
                            }
                        }
                    }
                }
            }

            // –°–µ–∫—Ü–∏—è –ª–æ–≥–∞
            GroupBox {
                title: "üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π"
                Layout.fillWidth: true
                Layout.fillHeight: true

                ScrollView {
                    anchors.fill: parent
                    TextArea {
                        id: logArea
                        readOnly: true
                        placeholderText: "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ª–æ–≥–∏..."
                        textFormat: TextEdit.PlainText
                    }
                }
            }

            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            Button {
                text: "üöÄ –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –ö–ù–û–ü–ö–ê"
                Layout.fillWidth: true
                height: 50
                font.bold: true
                onClicked: {
                    Backend.log("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
                    Backend.get_com_ports()
                }

                background: Rectangle {
                    color: parent.down ? "#4CAF50" :
                           parent.hovered ? "#66BB6A" : "#81C784"
                    radius: 8
                }
            }
        }
    }

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    Connections {
        target: Backend

        function onDataUpdated() {
            comboBox.model = Backend.get_combo_data()
            Backend.log("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ UI")
        }
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ TextArea
    function appendToLog(message) {
        logArea.text += new Date().toLocaleTimeString() + " - " + message + "\n"
        // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        logArea.cursorPosition = logArea.text.length
    }

    Component.onCompleted: {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        var originalLog = Backend.log
        Backend.log = function(message) {
            originalLog(message)
            appendToLog(message)
        }

        appendToLog("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    }
}